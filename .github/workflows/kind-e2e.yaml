name: KinD End-to-End

on: pull_request

env:
  NAME: "azad-kube-proxy"

jobs:
  build-container:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v2
      - name: Prepare
        id: prep
        run: |
          VERSION=sha-${GITHUB_SHA::8}
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF/refs\/tags\//}
          fi
          echo ::set-output name=BUILD_DATE::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=VERSION::${VERSION}
      - name: Cache container layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Set up KinD
        uses: engineerd/setup-kind@v0.5.0
      - name: Set up helm
        uses: azure/setup-helm@v1
      - name: Build and load (current arch)
        run: |
          docker buildx build --load -t ${{ env.NAME }}:${{ steps.prep.outputs.VERSION }} .
          kind load docker-image ${{ env.NAME }}:${{ steps.prep.outputs.VERSION }}
      - name: Install helm chart
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          TENANT_ID: ${{ secrets.TENANT_ID }}
          TEST_USER_SP_OBJECT_ID: ${{ secrets.TEST_USER_SP_OBJECT_ID }}
        run: |
          kubectl create namespace ${{ env.NAME }}
          helm upgrade --namespace ${{ env.NAME }} --install ${{ env.NAME }} --set secret.create=true --set secret.CLIENT_ID=${CLIENT_ID} --set secret.CLIENT_SECRET=${CLIENT_SECRET} --set secret.TENANT_ID=${TENANT_ID} --set service.type=NodePort ./charts/azad-kube-proxy
          
          cat <<EOF | kubectl apply -f -
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: ${TEST_USER_SP_OBJECT_ID}-admin
          subjects:
          - kind: User
            name: ${TEST_USER_SP_OBJECT_ID}
            apiGroup: rbac.authorization.k8s.io
          roleRef:
            kind: ClusterRole
            name: cluster-admin
            apiGroup: rbac.authorization.k8s.io
          EOF

          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Pod
          metadata:
            name: temp
            namespace: default
          spec:
            containers:
            - image: busybox
              name: test
              command: ["sleep"]
              args: ["3000"]
          EOF
      - name: Install helm chart
        env:
          TENANT_ID: ${{ secrets.TENANT_ID }}
          TEST_USER_SP_CLIENT_ID: ${{ secrets.TEST_USER_SP_CLIENT_ID }}
          TEST_USER_SP_CLIENT_SECRET: ${{ secrets.TEST_USER_SP_CLIENT_SECRET }}
          TEST_USER_SP_RESOURCE: ${{ secrets.TEST_USER_SP_RESOURCE }}
        run: |
          set -e
          az login --service-principal --username ${TEST_USER_SP_CLIENT_ID} --password ${TEST_USER_SP_CLIENT_SECRET} --tenant ${TENANT_ID} --allow-no-subscriptions 1>/dev/null
          TOKEN=$(az account get-access-token --resource ${TEST_USER_SP_RESOURCE} --query accessToken --output tsv)
          NODE_PORT=$(kubectl --namespace ${{ env.NAME }} get service ${{ env.NAME }} -o json | jq -r '.spec.ports[0].nodePort')
          RESPONSE=$(curl -s -k -H "Authorization: Bearer ${TOKEN}" http://localhost:${NODE_PORT}/api/v1/namespaces/default/pods | jq -r '.items[0].metadata.name')
          if [[ "${RESPONSE}" != "test" ]]; then
            echo Expected response to be test. Was: ${RESPONSE}
            exit 1
          fi